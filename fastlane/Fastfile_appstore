lane :auto_release_branch do |options|
  
  branch_name = git_branch
  UI.message("Текущая ветка: #{branch_name}")

  # 2. Проверяем сборки в бете и релизе
  beta_version = get_beta_version_number # Здесь нужно будет добавить функцию для получения версии из беты
  release_version = get_release_version_number # Функция для получения версии из релиза

  # 3. Сравниваем версии
  highest_version = [beta_version, release_version].max
  UI.message("Старшая версия: #{highest_version}")

  # Установка переменной окружения
  # sh("echo APP_VERSION=#{highest_version} >> $GITHUB_ENV")

  # # 4. Действия для релизной версии
  if highest_version == release_version
    # Собираем с повышением патч версии
    increment_version_number(bump_type: "patch")
  else
    increment_version_number(version_number: highest_version.to_s)
  end
  
  version_number = get_version_number(xcodeproj: ENV['MAIN_PROJECT_FILE'], target: MAIN_TARGET)

  push_to_git_remote(local_branch: branch_name, remote_branch: "release/#{version_number}", force: true)
  UI.message("Старшая версия: #{version_number}")

end

def get_beta_version_number
  # Используем Fastlane action для получения последнего номера сборки в TestFlight
  app_identifier = ENV["APP_IDENTIFIER"].split(',').first # Замените на идентификатор вашего приложения
  latest_testflight_build_number(app_identifier: app_identifier)
  
  # Возвращаем номер версии из TestFlight
  beta_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
  UI.message("Бета версия: #{beta_version}")
  return beta_version
end

def get_release_version_number
  # Используем Fastlane action для получения последнего номера сборки из App Store Connect
  app_identifier = ENV["APP_IDENTIFIER"].split(',').first # Замените на идентификатор вашего приложения
  app_store_build_number(app_identifier: app_identifier)
  
  # Возвращаем номер версии из App Store Connect
  release_version = lane_context[SharedValues::LATEST_VERSION]
  UI.message("Релизная версия: #{release_version}")
  return release_version
end