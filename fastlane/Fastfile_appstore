# frozen_string_literal: true

lane :auto_release_branch do |options|
  raise 'Has no APPSTORE_KEY_CONTENT' unless APPSTORE_KEY_CONTENT

  app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
                            issuer_id: APPSTORE_ISSUER_ID,
                            key_content: APPSTORE_KEY_CONTENT,
                            in_house: false,
                            is_key_content_base64: true)

  check_and_set_project_file
  branch_name = git_branch
  UI.message("Текущая ветка: #{branch_name}")

  # 2. Проверяем сборки в бете и релизе
  beta_version = beta_version_number # Здесь нужно будет добавить функцию для получения версии из беты
  release_version = release_version_number # Функция для получения версии из релиза

  # 3. Сравниваем версии
  highest_version = [beta_version, release_version].max
  UI.message("Старшая версия: #{highest_version}")

  # Установка переменной окружения
  # sh("echo APP_VERSION=#{highest_version} >> $GITHUB_ENV")

  version = highest_version
  version = increment_patch_version(highest_version) if highest_version == release_version

  # Синхронизируем локальные и удалённые ветки, удаляя несуществующие
  sh('git fetch --prune origin')

  # Название ветки для проверки
  branch_name = "release/#{version}"

  # Проверяем, существует ли ветка
  branch_exists = sh("git branch --list #{branch_name}").strip

  # Если ветка не существует, создаем её
  sh("git branch #{branch_name}") if branch_exists.empty?

  sh("echo \"VERSION=#{version}, TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')\" >> last_update.txt")
  sh("git add '*.txt'") # Добавляем все файлы .txt в staged

  update_metadata_year(options)
  sh("git add '**/*.txt'") # Добавляем все файлы .txt в staged

  git_commit(path: ['./*.txt'], message: 'Version Bump') # Коммитим изменения

  increment_version_number(version_number: highest_version.to_s)

  # # 4. Действия для релизной версии
  if highest_version == release_version
    # Собираем с повышением патч версии
    increment_version_number(bump_type: 'patch')
  end

  version_number = get_version_number(xcodeproj: ENV['MAIN_PROJECT_FILE'], target: MAIN_TARGET)

  push_to_git_remote(local_branch: branch_name, remote_branch: "release/#{version_number}", force: true)

  UI.message("Старшая версия: #{version_number}")
end

def increment_patch_version(version)
  # Разбиваем версию на части
  major, minor, patch = version.split('.').map(&:to_i)

  # Увеличиваем патч-версию
  patch += 1

  # Возвращаем новую версию в виде строки
  "#{major}.#{minor}.#{patch}"
end

lane :git_new do |options|
  check_and_set_project_file
  branch_name = git_branch
  push_to_git_remote(local_branch: branch_name, remote_branch: "release/#{options[:git_app_version]}", force: true)
end

lane :pass_to_review do |_options| # rubocop:disable Lint/UnderscorePrefixedVariableName
  check_and_set_project_file
  app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
                            issuer_id: APPSTORE_ISSUER_ID,
                            key_content: APPSTORE_KEY_CONTENT,
                            in_house: false,
                            is_key_content_base64: true)

  latest_testflight_build_number(app_identifier: ENV['APP_IDENTIFIER'].split(',').first)

  deliver(app_version: lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION],
          build_number: BUILD_NUMBER,
          submit_for_review: true,
          automatic_release: true,
          reject_if_possible: true,
          force: true, # Skip HTMl report verification
          skip_metadata: false,
          skip_screenshots: true,
          skip_binary_upload: true,
          precheck_include_in_app_purchases: false,
          submission_information: {
            add_id_info_limits_tracking: false,
            add_id_info_serves_ads: false,
            add_id_info_tracks_action: false,
            add_id_info_tracks_install: false,
            add_id_info_uses_idfa: false,
            content_rights_has_rights: false,
            content_rights_contains_third_party_content: false,
            export_compliance_platform: 'ios',
            export_compliance_compliance_required: false,
            export_compliance_encryption_updated: false,
            export_compliance_app_type: nil,
            export_compliance_uses_encryption: false,
            export_compliance_is_exempt: false,
            export_compliance_contains_third_party_cryptography: false,
            export_compliance_contains_proprietary_cryptography: false,
            export_compliance_available_on_french_store: false
          })

  merge_and_delete_release_branch(_options)
end

lane :update_metadata_year do |_options|
  # Определяем текущий год и месяц
  sh <<-SHELL
    CURRENT_YEAR=$(date +'%Y')
    CURRENT_MONTH=$(date +'%m')

    # Определяем целевой год
    if [ "$CURRENT_MONTH" -eq "12" ]; then
      TARGET_YEAR=$((CURRENT_YEAR + 1))
    else
      if [ "$CURRENT_MONTH" -eq "11" ]; then
        TARGET_YEAR=$((CURRENT_YEAR + 1))
      else
        TARGET_YEAR=$CURRENT_YEAR
      fi
    fi

    # Обновление года в файлах name.txt
    echo "Updating year in name.txt files..."
    find ./metadata -type f -name "name.txt" | while read -r file; do
      sed -i.bak "s/[0-9]\\{4\\}/$TARGET_YEAR/g" "$file"
      rm "$file.bak"
    done

    # Обновление года в файлах copyright.txt
    echo "Updating year in copyright.txt files..."
    find ./metadata -type f -name "copyright.txt" | while read -r file; do
      sed -i.bak "s/[0-9]\\{4\\}/$TARGET_YEAR/g" "$file"
      rm "$file.bak"
    done

    # Обновление года в файлах keywords.txt
    echo "Updating year in keywords.txt files..."
    find ./metadata -type f -name "keywords.txt" | while read -r file; do
      sed -i.bak "s/[0-9]\\{4\\}/$TARGET_YEAR/g" "$file"
      rm "$file.bak"
    done
  SHELL
end

desc 'Merge and delete an existing release branch'
lane :merge_and_delete_release_branch do |_options|
  release_branch = git_branch
  target_branch = 'main'

  # Переключение на целевую ветку
  UI.message("Switching to target branch #{target_branch}")
  sh("git checkout #{target_branch}")
  sh("git pull origin #{target_branch}") # Обновление целевой ветки до актуального состояния

  # Слияние релизной ветки в целевую ветку
  UI.message("Merging #{release_branch} into #{target_branch}")
  sh("git merge --no-ff #{release_branch}")

  # Отправка изменений в удалённый репозиторий
  UI.message("Pushing merged changes to origin/#{target_branch}")
  sh("git push origin #{target_branch}")

  # Удаление релизной ветки локально и в удалённом репозитории
  UI.message("Deleting release branch #{release_branch}")
  sh("git branch -d #{release_branch}") # Удаление локальной ветки
  sh("git push origin --delete #{release_branch}") # Удаление ветки в удалённом репозитории

  UI.message("Release branch #{release_branch} has been merged into #{target_branch} and deleted.")
end

def beta_version_number
  # Используем Fastlane action для получения последнего номера сборки в TestFlight
  app_identifier = ENV['APP_IDENTIFIER'].split(',').first # Замените на идентификатор вашего приложения
  latest_testflight_build_number(app_identifier: app_identifier)

  # Возвращаем номер версии из TestFlight
  beta_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
  UI.message("Бета версия: #{beta_version}")
  beta_version
end

def release_version_number
  # Используем Fastlane action для получения последнего номера сборки из App Store Connect
  app_identifier = ENV['APP_IDENTIFIER'].split(',').first # Замените на идентификатор вашего приложения
  app_store_build_number(app_identifier: app_identifier)

  # Возвращаем номер версии из App Store Connect
  release_version = lane_context[SharedValues::LATEST_VERSION]
  UI.message("Релизная версия: #{release_version}")
  release_version
end
