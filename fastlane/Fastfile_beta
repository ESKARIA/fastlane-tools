desc "Set new marketing version"
lane :version do |options|
    version_number = options[:ver]
    increment_version_number_in_plist(version_number: version_number.to_s, target: MAIN_TARGET)
    increment_version_number_in_xcodeproj(version_number: version_number.to_s)
end

desc "Build and upload to testflight"
lane :beta do |options|

    version(options)

    api_key = app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
                                issuer_id: APPSTORE_ISSUER_ID,
                                key_content: APPSTORE_KEY_CONTENT,
                                in_house: false,
                                is_key_content_base64: true)

    build_number = increment_build_number(build_number: options[:build] ? options[:build].to_i : BUILD_NUMBER.to_i)
    version_number = get_version_number(xcodeproj: MAIN_PROJECT_FILE, target: MAIN_TARGET)

    UI.message("App version: #{version_number} build #{build_number}")
    setup_ci
    match_prod(options)

    build_app(
        scheme: MAIN_TARGET, 
        export_xcargs: "-allowProvisioningUpdates", 
        cloned_source_packages_path: "SourcePackages",
        clean: true,
        build_path: DERIVED_PATH.to_s
    )
    DSYM_PATH = lane_context[SharedValues::DSYM_OUTPUT_PATH]
    UI.message(DSYM_PATH.to_s)
    
    tag_commit(version_number, build_number, options)

    upload_ipa(options)
    upload_dsyms(options)
end

desc "Upload ipa to AppStore Connect"
lane :upload_ipa do |options|
    toExternal = options[:public]

    api_key = app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
        issuer_id: APPSTORE_ISSUER_ID,
        key_content: APPSTORE_KEY_CONTENT,
        in_house: false,
        is_key_content_base64: true)

    changelog = changelog_from_git_commits(
        commits_count: 10,
        pretty: "[%an] - %s",
        merge_commit_filtering: "exclude_merges"
    )

    UI.message("[DEBUG]: Start deploy")
    if (toExternal == true)
        changelog = "Fixes bugs, improvements UI, new features"
        UI.message("[DEBUG]: External Public Beta")
        testflight(api_key: api_key, 
            changelog: changelog.to_s, 
            distribute_external: true, 
            groups: "External Public Beta",
            skip_waiting_for_build_processing: false, 
            expire_previous_builds: false)
    else
        UI.message("[DEBUG]: NO deploy to External Public Beta")
        testflight(api_key: api_key, 
            changelog: changelog.to_s, 
            distribute_external: false, 
            skip_waiting_for_build_processing: false, 
            expire_previous_builds: false)
    end
    UI.message("[DEBUG]: Complete deploy")

end

desc "Upload symbols"
lane :upload_dsyms do |options|
                                       
    upload_symbols_to_appmetrica(post_api_key: APPMETRICA_KEY, binary_path: "./helper")

    
    firebase = options[:firebase] ? true : false
    if firebase
        upload_symbols_to_crashlytics(binary_path: CRASHLYTICS_PATH, dsym_path: DSYM_PATH.to_s)
    end

    # Delete the local dSYM files
    clean_build_artifacts 

end

# Напиши новый лейн для fastlane, установки тега на коммит
def tag_commit(version_number, build_number, options)
    needTags = options[:tags] ? true : false
    if needTags
        tag_name = "v#{version_number}-build-#{build_number}"
        if git_tag_exists(tag: tag_name, remote: true)
            UI.message("#{tag_name} already exist!")
        else
            add_git_tag(tag: tag_name)
        end
    end

end