desc "Set new marketing version"
lane :version do |options|
    version_number = options[:ver]
    increment_version_number_in_plist(version_number: version_number.to_s, target: MAIN_TARGET)
    increment_version_number_in_xcodeproj(version_number: version_number.to_s)
end

desc "Build project"
lane :build do |options|
    sh("mkdir -p " + ARTIFACTS_PATH.to_s)
    version(options)

    api_key = app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
                                issuer_id: APPSTORE_ISSUER_ID,
                                key_content: APPSTORE_KEY_CONTENT,
                                in_house: false,
                                is_key_content_base64: true)

    build_number = increment_build_number(build_number: options[:build] ? options[:build].to_i : BUILD_NUMBER.to_i)
    version_number = get_version_number(xcodeproj: MAIN_PROJECT_FILE, target: MAIN_TARGET)

    UI.message("App version: #{version_number} build #{build_number}")
    setup_ci
    match_prod(options)

    build_app(
        scheme: MAIN_TARGET, 
        export_xcargs: "-allowProvisioningUpdates", 
        cloned_source_packages_path: "SourcePackages",
        clean: true,
        output_directory: ARTIFACTS_PATH.to_s,
        output_name: IPA_FILE_NAME.to_s,
        build_path: DERIVED_PATH.to_s
    )
    
    tag_commit(version_number, build_number, options)
    
end

def tag_commit(version_number, build_number, options)
    needTags = options[:tags] ? true : false
    if needTags
        tag_name = "v#{version_number}-build-#{build_number}"
        if git_tag_exists(tag: tag_name, remote: true)
            UI.message("#{tag_name} already exist!")
        else
            add_git_tag(tag: tag_name)
        end
    end

end