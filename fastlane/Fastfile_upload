desc "Upload ipa to AppStore Connect TestFlight"
lane :upload_testflight do |options|
    toExternal = options[:public]

    api_key = app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
        issuer_id: APPSTORE_ISSUER_ID,
        key_content: APPSTORE_KEY_CONTENT,
        in_house: false,
        is_key_content_base64: true)

    # Получение последнего тега
    last_tag = sh("git describe --tags --abbrev=0").strip

    # Получение хэша коммита этого тега
    commit_of_last_tag = sh("git rev-list -n 1 #{last_tag}").strip

    changelog = changelog_from_git_commits(
        between: [commit_of_last_tag.to_s, "HEAD"],
        pretty: " - %s",
        merge_commit_filtering: "exclude_merges"
    )
    UI.message("[DEBUG]: Changelog")
    UI.message(changelog.to_s)

    app_identifier = ENV["APP_IDENTIFIER"].split(',').first

    UI.message("[DEBUG]: Start deploy")
    if (toExternal == true)
        # changelog = "Fixes bugs, improvements UI, new features"
        UI.message("[DEBUG]: Deploy to External Public Beta Test")
        testflight(api_key: api_key, 
            app_identifier: app_identifier,
            changelog: changelog.to_s, 
            distribute_external: true, 
            groups: "External Public Beta",
            skip_waiting_for_build_processing: false, 
            expire_previous_builds: false,
            ipa: IPA_FILE_PATH.to_s)
    else
        UI.message("[DEBUG]: Deploy to Internal Beta Test")
        testflight(api_key: api_key, 
            app_identifier: app_identifier,
            changelog: changelog.to_s, 
            distribute_external: false, 
            skip_waiting_for_build_processing: false, 
            expire_previous_builds: false,
            ipa: IPA_FILE_PATH.to_s)
    end
    UI.message("[DEBUG]: Complete deploy")

end

desc "Set versions on tag"
lane :tagging do |options|

    build_number = options[:build] ? options[:build].to_i : BUILD_NUMBER.to_i
    version_number = options[:ver].to_s

    tag_commit(version_number, build_number, options)

end

def tag_commit(version_number, build_number, options)
    needTags = options[:tags] ? true : false
    tag_name = "v#{version_number}-build-#{build_number}"
    UI.message("[DEBUG]: Tag to set #{tag_name}")
    if needTags
        if git_tag_exists(tag: tag_name, remote: true)
            UI.message("[DEBUG]: #{tag_name} already exist!")
        else
            add_git_tag(tag: tag_name)
        end
    end

end