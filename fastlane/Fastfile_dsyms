desc "Upload symbols"
lane :upload_dsyms do |options|

    sh("cp " + DSYM_PATH.to_s + " ./")

    require 'find'
    dsym_paths = []
    Find.find('.') do |path|
      dsym_paths << path if path.end_with?('.dSYM.zip')
    end

    UI.message(dsym_paths)

    helper_path = ENV['APPMETRICA_HELPER_PATH'] if helper_path.nil? || helper_path.empty?
    message = "[DEBUG]: Helper path: " + helper_path.to_s
    UI.message(message)
    isMetrica = !helper_path.nil? && !helper_path.empty?
    if isMetrica 
        UI.message("[DEBUG]: Download AppMetrica helper file...")
        sh("pwd")
        sh("ls")
        download_file
        UI.message("[DEBUG]: Deploy DSYMS to AppMetrica...")
        # sh("unzip -o #{dsym_paths}")
        # sh("ruby #{helper_path} -k #{APPMETRICA_KEY} -p #{dsym_paths}")
        unzip_and_upload
        sh("ls")

        # upload_symbols_to_appmetrica(post_api_key: APPMETRICA_KEY, 
        #                              binary_path: helper_path.to_s, 
        #                              files: dsym_paths,
        #                              verbose: true,
        #                              package_output_path: "./")
    end

    firebase = options[:firebase] ? true : false
    if firebase
        UI.message("[DEBUG]: Deploy DSYMS to Firebase...")
        upload_symbols_to_crashlytics(binary_path: CRASHLYTICS_PATH, 
                                      dsym_path: DSYM_PATH.to_s)
    end

    # Delete the local dSYM files
    # clean_build_artifacts 
    
end

lane :download_file do
    require 'open-uri'
    begin
      url = 'https://github.com/ESKARIA/fastlane-tools/raw/main/fastlane/helper' # Замените на вашу ссылку
      File.open('helper', 'wb') do |file|
        file.write(URI.open(url).read)
      end
    rescue OpenURI::HTTPError => e
      puts "Не удалось загрузить файл: #{e.message}"
    rescue StandardError => e
      puts "Произошла ошибка: #{e.message}"
    end
end
  
lane :unzip_and_upload do |options| 
    require 'fileutils'
    require 'find'
    helper_path = ENV['APPMETRICA_HELPER_PATH'] if helper_path.nil? || helper_path.empty?

    dsym_paths = []
    Find.find('.') do |path|
      dsym_paths << path if path.end_with?('.dSYM.zip')
    end
    dsym_paths.each do |zip_file|
        # Проверяем, существует ли файл
        if File.exist?(zip_file)
          # Создаем папку для распаковки, если она еще не существует
          destination_folder = File.join(File.dirname(zip_file), File.basename(zip_file, ".zip"))
          FileUtils.mkdir_p(destination_folder) unless File.exist?(destination_folder)
      
          # Распаковываем файл
          system("unzip", "-o", zip_file, "-d", destination_folder)
          sh("ls")
          dsym_path = ""
          Find.find('.') do |path|
            dsym_path << path if path.end_with?('.dSYM')
            UI.message("[DEBUG]: Start upload #{dsym_path}")
            sh("ruby #{helper_path} -k #{APPMETRICA_KEY} -p #{dsym_path}")
          end
        else
          puts "Файл не найден: #{zip_file}"
        end
    end
end