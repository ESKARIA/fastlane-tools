desc "Upload symbols"
lane :upload_dsyms do |options|

    sh("cp " + DSYM_FILE_PATH.to_s + " ./")

    require 'find'
    dsym_paths = []
    Find.find('.') do |path|
      dsym_paths << path if path.end_with?('.dSYM.zip')
    end

    UI.message(dsym_paths)

    sh("cp -f ~/Yandex.Disk.localized/TAXCOM-Public/artifacts/YandexMetrica/helper ./")

    message = "[DEBUG]: Helper path: " + HELPER_PATH.to_s
    UI.message(message)
    isMetrica = !HELPER_PATH.nil? && !HELPER_PATH.empty?
    if isMetrica 
        UI.message("[DEBUG]: Deploy DSYMS to AppMetrica...")
        unzip_and_upload
        sh("ls")
    end

    firebase = options[:firebase] ? true : false
    if firebase
        UI.message("[DEBUG]: Deploy DSYMS to Firebase...")
        upload_symbols_to_crashlytics(binary_path: CRASHLYTICS_PATH, dsym_path: DSYM_FILE_PATH.to_s)
    end

    # Delete the local dSYM files
    # clean_build_artifacts 

end

lane :unzip_and_upload do |options| 
    require 'fileutils'
    require 'find'

    sh("pwd")
    sh("CDIR=$(pwd)")
    sh("ls -a")
    dsym_paths = []
    Find.find(".") do |path|
      dsym_paths << ENV['CDIR'].to_s + path if path.end_with?('.dSYM.zip')
    end
    UI.message(dsym_paths)
    # upload_symbols_to_appmetrica(post_api_key: APPMETRICA_KEY, 
    #                                      binary_path: HELPER_PATH.to_s, 
    #                                      files: dsym_paths)
    dsym_paths.each do |zip_file|
        # Проверяем, существует ли файл
        if File.exist?(zip_file)
          is_git = ENV['GITHUB_ACTIONS'] || false
          if is_git
            sh("#{HELPER_PATH} -k #{APPMETRICA_KEY} -p #{zip_file}")
          else
            upload_symbols_to_appmetrica(post_api_key: APPMETRICA_KEY, 
                                         binary_path: HELPER_PATH.to_s, 
                                         files: zip_file)
          end
          
        else
          puts "Файл не найден: #{zip_file}"
        end
    end
end