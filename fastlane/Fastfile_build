# frozen_string_literal: true

desc 'Set new marketing version'
lane :version do |_options|
  increment_version_number_in_plist(version_number: ENV['APP_VERSION'].to_s, target: MAIN_TARGET)
  increment_version_number_in_xcodeproj(version_number: ENV['APP_VERSION'].to_s)
end

desc 'Build project'
lane :build do |options|
  check_and_set_project_file

  sh("mkdir -p #{IPA_FOLDER_PATH}")
  sh("mkdir -p #{DSYM_FOLDER_PATH}")

  version(options)

  app_store_connect_api_key(key_id: APPSTORE_KEY_ID,
                            issuer_id: APPSTORE_ISSUER_ID,
                            key_content: APPSTORE_KEY_CONTENT,
                            in_house: false,
                            is_key_content_base64: true)

  build_number = increment_build_number(build_number: BUILD_NUMBER.to_i)
  version_number = get_version_number(xcodeproj: ENV['MAIN_PROJECT_FILE'], target: MAIN_TARGET)

  UI.message("App version: #{version_number} build #{build_number}")
  
  match_install_appstore(options)
  prepare_keychain
  unlock_keychain(
    path: KEYCHAIN_PATH,
    password: KEYCHAIN_PASSWORD
  )
  sh("security list-keychains")
  sh("security find-identity -v -p codesigning")

  build_app(
    scheme: MAIN_TARGET,
    export_xcargs: '-allowProvisioningUpdates',
    cloned_source_packages_path: 'SourcePackages',
    clean: true,
    output_name: IPA_FILE_NAME.to_s,
    build_path: DERIVED_PATH.to_s
  )

  copy_artifacts(target_path: IPA_FOLDER_PATH.to_s, artifacts: ['*.ipa', IPA_FILE_PATH.to_s])
  copy_artifacts(target_path: DSYM_FOLDER_PATH.to_s, artifacts: ['*.dSYM.zip', DSYM_FILE_PATH.to_s])
  copy_artifacts(target_path: 'fastlane/artifacts/', artifacts: ['*.dSYM.zip', '*.ipa'])

end

lane :prepare_keychain do
  # delete_keychain(keychain_path: KEYCHAIN_PATH)
  # create_keychain(
  #   path: KEYCHAIN_PATH,
  #   password: ENV["KEYCHAIN_PASSWORD"],
  #   default_keychain: true,
  #   unlock: true,
  #   timeout: 3600,
  #   add_to_search_list: true # ← важно!
  # )
  # sh("security list-keychains -s #{KEYCHAIN_PATH} /Users/ci/Library/Keychains/login.keychain-db /Library/Keychains/System.keychain")
  # sh("security find-identity -v -p codesigning #{KEYCHAIN_PATH}")
  sh("security unlock-keychain -p #{KEYCHAIN_PASSWORD} #{KEYCHAIN_PATH}")
  sh("security list-keychains -s #{KEYCHAIN_PATH} /Users/ci/Library/Keychains/login.keychain-db /Library/Keychains/System.keychain")
  sh("security set-keychain-settings -t 3600 -u #{KEYCHAIN_PATH}")
  sh("security find-identity -v -p codesigning #{KEYCHAIN_PATH}")
end